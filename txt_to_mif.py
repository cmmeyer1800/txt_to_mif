# AUTHOR : Collin Meyer
# Date : 4-21-22

# This script turns txt files with palette addresses for memory initialization into MIF files

#   .MIF file syntax from the following link
#   https://www.intel.com/content/www/us/en/programmable/quartushelp/13.0/mergedProjects/reference/glossary/def_mif.htm

import math

class cmdline:
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    OK = '\033[92m'

    message = f"""
    Author: Collin Meyer
    This script was developed to help students in ECE385 turn their .TXT memory initialization file into
    a .MIF memory initialization file for use with the quartus IP megawizard for on chip memory
    """

def convert(filename):
    with open(f"{filename}.txt", "r") as FILE:
        lines = FILE.readlines() # Read TXT memory file from png to txt script

    depth = len(lines)
    width = math.ceil(math.log(max(map(int, lines)), 2)) # Find largest palette index value and then take the log base 2 to determine bit width

    addr_len = math.ceil(math.log(depth, 16)) # Get the length of the hex addresses in order to do zero padding
    data_len = math.ceil(math.log(max(map(int, lines)), 16)) # Same thing as ^ but for the data values

    with open(f"{filename}.mif","w") as FILE:
        FILE.write("-- THIS FILE HAS BEEN AUTOGENERATED BY A SCRIPT\n\n\n")

        FILE.write(f"DEPTH = {depth};\n") # Write the Depth of the memory to MIF file
        FILE.write(f"WIDTH = {width};\n") # Write the Width of the memory to MIF file
        FILE.write("ADDRESS_RADIX = HEX;\n") # Write the radix of the addresses to the MIF file
        FILE.write("DATA_RADIX = HEX;\n\n") # Write the radix of the data at each location to the MIF file
        FILE.write("CONTENT\n") # Key word to begin initialization addresses and data
        FILE.write("BEGIN\n\n")

        for idx, row in enumerate(lines):
            addr_num = str(hex(idx))[2:]
            addr_num = "0" * (addr_len - len(addr_num)) + addr_num

            data = str(hex(int(row)))[2:]
            data = "0" * (data_len - len(data)) + data

            FILE.write(f"{addr_num} : ")
            FILE.write(f"{data};\n")

        FILE.write("\nEND;") # Signal end to memory initialization data

# Begin script execution

def main():
    print(cmdline.message)

    infile = input("Please enter .txt file name: ")

    try:
        convert(infile)
    except Exception as e:
        print(f"{cmdline.BOLD}{cmdline.UNDERLINE}{cmdline.FAIL}FAILED TO CONVERT FILE DUE TO ERROR:{cmdline.ENDC}\n {e}")
    else:
        print(f"{cmdline.BOLD}{cmdline.UNDERLINE}{cmdline.OK}CONVERSION SUCCEEDED!{cmdline.ENDC}")

if __name__ == "__main__":
    main()